/**
 * Created by Jason Cookman on 2/9/20.
 */

global without sharing class FS_ProformaBatchJob implements Database.Batchable<sObject>, System.Schedulable, Database.Stateful {

    private static final String SALES_ORDER_LINE_QUERY =
            'SELECT Id,OrderApi__Contact__c, OrderApi__Sales_Order__c, OrderApi__Sales_Order__r.OrderApi__Total__c, OrderApi__Contact__r.FS_Primary_Affiliation__c, ' +
                    'OrderApi__Item__c, OrderApi__Item__r.Name, OrderApi__Item__r.OrderApi__Item_Class__c, OrderApi__Subscription_Plan__c, OrderApi__Subscription_Plan__r.FS_Do_Not_Add_Donation_Item__c, OrderApi__Price_Rule__c, OrderApi__Is_Renewal__c, ' +
                    'OrderApi__Contact__r.FS_Primary_Affiliation__r.OrderApi__Primary_Contact__c, OrderApi__Sale_Price__c,OrderApi__Subscription__c ' +
                    ' FROM OrderApi__Sales_Order_Line__c ' +
                    'WHERE OrderApi__Item__r.FS_Is_Membership__c = TRUE ' +
                    'AND OrderApi__Is_Subscription__c = TRUE ' +
                    'AND OrderApi__Sales_Order__r.FS_Proforma_Job_In_Progress__c = FALSE ' +
                    'AND OrderApi__Sales_Order__r.FS_Processed_By_Batch_Job__c = FALSE ' +
                    'AND OrderApi__Sales_Order__r.OrderApi__Posting_Entity__c = \'Receipt\' ' +
                    'AND OrderApi__Sales_Order__r.OrderApi__Posting_Status__c = \'Pending\' ' +
                    'AND OrderApi__Sales_Order__r.OrderApi__Status__c=\'Closed\'';
                    // Proformas generated by the system should only have one line on their sales order (No longer the case with package items)
                    //'AND OrderApi__Sales_Order__r.OrderApi__Item_Count__c = 1';

    @TestVisible
    private static final String SECTION_TYPE_STRING = 'Section';
    private static final String SECTION_COMMITTEE_STRING = 'Section Committee';

    @TestVisible
    private static Id GENERAL_DONATION_ITEM_ID;
    @TestVisible
    private static String COMPLEMENTARY_MEMBER_PRICE_IDS;
    @TestVisible
    private static Id GENERAL_CONTRIBUTION_ID;

    @TestVisible
    private static String LAW_STUDENT_IDS;
    //Item class ID for Section Renewal Dues
    @TestVisible
    private static Id SECTION_RENEWAL_DUES_ID;
    @TestVisible
    private static Integer BATCH_SIZE;
    @TestVisible
    private static Integer POSTING_BATCH_SIZE;
    @TestVisible
    private static Decimal FIRM_BILL_CONTRIBUTION_AMOUNT;
    @TestVisible
    private static Decimal INDIVIDUAL_CONTRIBUTION_AMOUNT;

    private static Boolean errorOccurred = false;
    private static String errorMessageString = '';
    private static Integer postJobCount = 0;

    private static final Map<Id, Id> CG_TO_RENEWAL_ITEM = new Map<Id, Id>();

    private Map<Id, Id> contactIdToSalesOrderIdMap = new Map<Id, Id>();
    private Map<Id, Set<Id>> contactIdToFreeCGMItemIds = new Map<Id, Set<Id>>();

    // Community Group Member Id -> PagesApi__Community_Group_Member__c
    private Map<Id, PagesApi__Community_Group_Member__c> cgmCache = new Map<Id, PagesApi__Community_Group_Member__c>();

    private void initializeInstanceVariables() {
        contactIdToSalesOrderIdMap = new Map<Id, Id>();
        contactIdToFreeCGMItemIds = new Map<Id, Set<Id>>();
        cgmCache = new Map<Id, PagesApi__Community_Group_Member__c>();
    }

    static {
        FS_Proforma_Batch_Settings__mdt batchJobSettings = [
                SELECT FS_Batch_Job_Size__c, FS_Posting_Batch_Size__c, FS_General_Contribution_Id__c,
                        FS_Law_Student_Item_Id__c, FS_Section_Renewal_Dues_Item_Class_Id__c,
                        FS_Individual_Contribution_Amount__c, FS_Firm_Billing_Contribution_Amount__c,
                        FS_General_Donation_Item_Id__c, FS_Complementary_Member_Price_Id__c
                FROM FS_Proforma_Batch_Settings__mdt
                LIMIT 1
        ];

        GENERAL_CONTRIBUTION_ID = batchJobSettings.FS_General_Contribution_Id__c;
        LAW_STUDENT_IDS = batchJobSettings.FS_Law_Student_Item_Id__c;
        BATCH_SIZE = Integer.valueOf(batchJobSettings.FS_Batch_Job_Size__c);
        POSTING_BATCH_SIZE = Integer.valueOf(batchJobSettings.FS_Posting_Batch_Size__c);
        SECTION_RENEWAL_DUES_ID = batchJobSettings.FS_Section_Renewal_Dues_Item_Class_Id__c;
        INDIVIDUAL_CONTRIBUTION_AMOUNT = batchJobSettings.FS_Individual_Contribution_Amount__c;
        FIRM_BILL_CONTRIBUTION_AMOUNT = batchJobSettings.FS_Firm_Billing_Contribution_Amount__c;

        GENERAL_DONATION_ITEM_ID = batchJobSettings.FS_General_Donation_Item_Id__c;
        COMPLEMENTARY_MEMBER_PRICE_IDS = batchJobSettings.FS_Complementary_Member_Price_Id__c;

        initializeCGRenewalMap();
    }

    @TestVisible
    private static void initializeCGRenewalMap() {
        for (OrderApi__Item__c currItem : [
                SELECT Id, FS_Linked_Community_Group__c
                FROM OrderApi__Item__c
                WHERE OrderApi__Is_Active__c = TRUE
                AND OrderApi__Item_Class__c = :SECTION_RENEWAL_DUES_ID
                AND FS_Linked_Community_Group__c != NULL
        ]) {
            CG_TO_RENEWAL_ITEM.put(currItem.FS_Linked_Community_Group__c, currItem.Id);
        }
    }


    global Database.QueryLocator start(Database.BatchableContext BC) {
        return Database.getQueryLocator(SALES_ORDER_LINE_QUERY);
    }

    global void execute(Database.BatchableContext BC, List<OrderApi__Sales_Order_Line__c> membershipSalesOrderLines) {
        Set<Id> salesOrderIdsNeedToCheck = new Set<Id>();
        for (OrderApi__Sales_Order_Line__c tempSalesOrderLine : membershipSalesOrderLines) {
            salesOrderIdsNeedToCheck.add(tempSalesOrderLine.OrderApi__Sales_Order__c);
        }
        Set<Id> salesOrderIdsAlreadyDeleted = new Map<Id, OrderApi__Sales_Order__c>([
                SELECT
                        Id
                FROM
                        OrderApi__Sales_Order__c
                WHERE IsDeleted = TRUE AND Id IN :salesOrderIdsNeedToCheck ALL ROWS]).keySet();

        List<OrderApi__Sales_Order_Line__c> tempMembershipSalesOrderLines = new List<OrderApi__Sales_Order_Line__c>();

        for (OrderApi__Sales_Order_Line__c tempMembershipSalesOrderLine : membershipSalesOrderLines) {
            if (!salesOrderIdsAlreadyDeleted.contains(tempMembershipSalesOrderLine.OrderApi__Sales_Order__c)) {
                tempMembershipSalesOrderLines.add(tempMembershipSalesOrderLine);
            }
        }

        membershipSalesOrderLines = tempMembershipSalesOrderLines;

        if (!membershipSalesOrderLines.isEmpty()) {
            // make sure these variables are reset to their original values;
            initializeInstanceVariables();
            // we shouldn't need to call smartystreets when this job runs. If this is the case there is another issue with
            // address verification that needs to be looked into
            FS_VerifySOLineAddressRoutingRule.skipCallout = true;
            FS_VerifySalesOrderAddressRoutingRule.skipCallout = true;
            FS_ContactsRule.skipRoutingRule = true;

            Datetime executeDate;
            if (executeDate == null) {
                executeDate = System.now();
            }
            try {
                Set<Id> subscriptionIds = getSubscriptionIdsFromSalesOrderLines(membershipSalesOrderLines);
                List<OrderApi__Sales_Order_Line__c> soLinesToUpdateSubPlan = getSoLinesToUpdateSubscriptionPlan(subscriptionIds, membershipSalesOrderLines);
                if (!soLinesToUpdateSubPlan.isEmpty()) {
                    update soLinesToUpdateSubPlan;
                }
                Set<Id> salesOrderIds = new Set<Id>();

                Set<Id> allContactIds = getContactIdsFromSalesOrderLinesAndMapContactToSO(membershipSalesOrderLines);

                Set<Id> allAccountIds = getAccountIdsFromRelevantSalesOrdersLines(membershipSalesOrderLines);

                Set<Id> salesOrderLineIdNeedUpdateTotal = new Set<Id>();
                Map<Id, Contact> contactsWithFirmBilling = getContactsWithPrimaryAffFirmBilling(allAccountIds);


                Integer originalAllContactSize = allContactIds.size();


                // add in the additional contacts that may have been found when we got additional contacts with firm billing
                allContactIds.addAll(contactsWithFirmBilling.keySet());

//            assignSalesOrderToList(membershipSalesOrderLines, salesOrderLineIdNeedUpdateTotal, salesOrderUpdateTotal);
                assignSalesOrderToList(membershipSalesOrderLines, salesOrderLineIdNeedUpdateTotal);


                // we may need to re-query for additional sales order lines since some new ones might
                // have been added due to firm billing
                if (originalAllContactSize != allContactIds.size() || Test.isRunningTest()) {

                    membershipSalesOrderLines = requerySalesOrderLinesWithFirmBillingContacts(allContactIds);

                }

                membershipSalesOrderLines = removePrimaryContactsWhoOptedOutOfFirmBilling(membershipSalesOrderLines, contactsWithFirmBilling);


                List<OrderApi__Sales_Order__c> relevantSalesOrders = new List<OrderApi__Sales_Order__c>();


                addOpenRelatedSalesOrderToList(membershipSalesOrderLines, salesOrderIds, relevantSalesOrders);


                populateFreeCGMs(allContactIds);
                relevantSalesOrders = reassignFirmBillingSalesOrderLines(membershipSalesOrderLines, contactsWithFirmBilling,
                        relevantSalesOrders);


                // This needs to occur after the SOL has been moved to the firm billing SO (if it needs to be moved)
                updateSOLTotal(salesOrderLineIdNeedUpdateTotal);

                retrieveAndStoreAllRelevantCGMRecords(allContactIds);

                List<OrderApi__Sales_Order_Line__c> salesOrderLinesToInsert = generateSaleOrderLinesForCGMs(allContactIds);

                createGenContributionItemsForSalesOrderAndAddToList(membershipSalesOrderLines,
                        contactsWithFirmBilling, salesOrderLinesToInsert);

                insert salesOrderLinesToInsert;

                // post the sales order if the price is 0
//            postProcessedSOIfTotalZero(salesOrderUpdateTotal, salesOrderIdToPost);

                // we need to close the sales order after making changes
                // setSalesOrdersToClosedPending(relevantSalesOrders);

                // NOTE: If the firm billing contact has auto renew on the Sales Order and firm billing checked
                // this will charge the card linked to that sales order for the full firm billing amount on that sales order
                // not just that person's stuff
                // updateSalesOrderSchedulePayments(relevantSalesOrders);

                // Schedule the job for posting the $0 sales orders and deleting any old invoices on the Sales Orders
                /// schedulePostBatchJob(salesOrderIdToPost, relevantSalesOrders, executeDate);//second

            } catch (Exception e) {

                errorOccurred = true;
                errorMessageString += e.getMessage() + ' ' + e.getStackTraceString() + '<br/>';
                System.debug(LoggingLevel.ERROR, 'An error occurred during FS_ProformaBatchRun:\n' + e.getStackTraceString());
                throw e;
            } finally {

                FS_VerifySOLineAddressRoutingRule.skipCallout = false;
                FS_VerifySalesOrderAddressRoutingRule.skipCallout = false;
                FS_ContactsRule.skipRoutingRule = false;
            }
        }
    }

    global void finish(Database.BatchableContext BC) {
        // Get the ID of the AsyncApexJob representing this batch job
        // from Database.BatchableContext.
        // Query the AsyncApexJob object to retrieve the current job's information.
        AsyncApexJob runningJob = [
                SELECT Id, Status, NumberOfErrors, JobItemsProcessed,
                        TotalJobItems, CreatedBy.Email
                FROM AsyncApexJob
                WHERE Id = :BC.getJobId()
        ];

        if (runningJob.NumberOfErrors == 0 && !errorOccurred) {
            // All that should be remaining are any primary contacts who are not firm bill
            // but have children that were firm bill
            if (Database.query(SALES_ORDER_LINE_QUERY + ' LIMIT 1').size() > 0) {
                Database.executeBatch(new FS_ProformaBatchJob(), BATCH_SIZE);
            } else {
                // Close and Post Sales Orders, Figure out SP and SPL amounts (CPU Intensive)
                Database.executeBatch(new FS_ProformaFinishProcess(), POSTING_BATCH_SIZE);
            }
        } else {
            System.debug(LoggingLevel.ERROR, 'An error occurred during this run. Not re-firing batch job');
//            sendErrorEmailToRunningUser();
        }

    }

    global void execute(SchedulableContext sc) {
        Database.executeBatch(new FS_ProformaBatchJob(), BATCH_SIZE);
    }

//    private void schedulePostBatchJob(Set<Id> salesOrderIdToPost, List<OrderApi__Sales_Order__c> salesOrderIdToDeleteInvoice, Datetime executeDate) {
//        if ((salesOrderIdToPost != null && !salesOrderIdToPost.isEmpty()) || (salesOrderIdToDeleteInvoice != null && !salesOrderIdToDeleteInvoice.isEmpty())) {
//            Datetime dtTimeNow = System.now().addSeconds(60);
//            String cronExpression = '' + dtTimeNow.second() + ' ' + dtTimeNow.minute() + ' ' + dtTimeNow.hour() + ' ' + dtTimeNow.day() + ' ' + dtTimeNow.month() +
//                    ' ? ' + dtTimeNow.year();
//            System.schedule('FS_ProformaBatchPostSalesOrderJob' + dtTimeNow + (postJobCount++), cronExpression,
//                    new FS_ProformaBatchPostSalesOrderJob(salesOrderIdToPost, salesOrderIdToDeleteInvoice, executeDate));
//        }
//    }

    private static Set<Id> getSubscriptionIdsFromSalesOrderLines (List<OrderApi__Sales_Order_Line__c> salesOrderLinesToProcess){
        Set<Id> subIds = new Set<Id>();
        for(OrderApi__Sales_Order_Line__c soLine: salesOrderLinesToProcess){
            if(soLine.OrderApi__Subscription__c != null){
                subIds.add(soLine.OrderApi__Subscription__c);
            }
        }
        return subIds;
    }

    private static List<OrderApi__Sales_Order_Line__c> getSoLinesToUpdateSubscriptionPlan (Set<Id> subscriptionIds,List<OrderApi__Sales_Order_Line__c> salesOrderLinesToProcess ){
        List<OrderApi__Sales_Order_Line__c> salesOrderLines = new List<OrderApi__Sales_Order_Line__c>();
        Map<Id,OrderApi__Subscription__c> subscriptionMap = new Map<Id,OrderApi__Subscription__c>( [SELECT Id,OrderApi__Item__c,OrderApi__Paid_Through_Date__c,
        (SELECT Id,OrderApi__Is_Active__c,OrderApi__Item__c,OrderApi__Subscription_Plan__c,OrderApi__Subscription__c,OrderApi__Item__r.FS_Is_Membership__c
        FROM OrderApi__Renewals__r WHERE OrderApi__Item__r.FS_Is_Membership__c = TRUE AND OrderApi__Is_Active__c = TRUE LIMIT 1) FROM OrderApi__Subscription__c
        WHERE Id IN :subscriptionIds ORDER BY OrderApi__Paid_Through_Date__c DESC]);

        for (OrderApi__Sales_Order_Line__c soLine:salesOrderLinesToProcess){
            if (soLine.OrderApi__Subscription__c != null && subscriptionMap.get(soLine.OrderApi__Subscription__c).OrderApi__Renewals__r.size() == 1 ){
                OrderApi__Renewal__c term = subscriptionMap.get(soLine.OrderApi__Subscription__c).OrderApi__Renewals__r[0];
                if (term != null && term.OrderApi__Subscription__c == soLine.OrderApi__Subscription__c &&
                        term.OrderApi__Item__c == soLine.OrderApi__Item__c && term.OrderApi__Subscription_Plan__c != soLine.OrderApi__Subscription_Plan__c){
                    soLine.OrderApi__Subscription_Plan__c = term.OrderApi__Subscription_Plan__c;
                    salesOrderLines.add(soLine);
                }
            }
        }
        return salesOrderLines;
    }

    private void addOpenRelatedSalesOrderToList(List<OrderApi__Sales_Order_Line__c> membershipSalesOrderLines, Set<Id> salesOrderIds, List<OrderApi__Sales_Order__c> relevantSalesOrders) {
        for (OrderApi__Sales_Order_Line__c currLine : membershipSalesOrderLines) {
            if(!salesOrderIds.contains(currLine.OrderApi__Sales_Order__c)) {

                salesOrderIds.add(currLine.OrderApi__Sales_Order__c);
                currLine.OrderApi__Sales_Order__r.OrderApi__Status__c = 'Open';
                currLine.OrderApi__Sales_Order__r.OrderApi__Posting_Status__c = null;
                currLine.OrderApi__Sales_Order__r.FS_Proforma_Job_In_Progress__c = true;
                relevantSalesOrders.add(currLine.OrderApi__Sales_Order__r);
            }
        }

        // we need to have the sales order open before making any changes to sales order lines
        update relevantSalesOrders;
    }

    private void updateSOLTotal(Set<Id> salesOrderLineIdNeedUpdateTotal) {
        if (salesOrderLineIdNeedUpdateTotal.size() != 0) {
            List<OrderApi__Sales_Order_Line__c> SOLUpdateTotal = [SELECT Id, OrderApi__Total__c FROM OrderApi__Sales_Order_Line__c WHERE Id IN :salesOrderLineIdNeedUpdateTotal];
            for (OrderApi__Sales_Order_Line__c currSOL : SOLUpdateTotal) {
                currSOL.OrderApi__Price_Override__c = true;
                currSOL.OrderApi__Sale_Price__c = 0;
            }
            update SOLUpdateTotal;
        }
    }
    private void assignSalesOrderToList(List<OrderApi__Sales_Order_Line__c> membershipSalesOrderLines, Set<Id> salesOrderLineIdNeedUpdateTotal) {

        for (OrderApi__Sales_Order_Line__c currLine : membershipSalesOrderLines) {
            if (COMPLEMENTARY_MEMBER_PRICE_IDS != null &&
                    String.isNotBlank(currLine.OrderApi__Price_Rule__c) &&
                    COMPLEMENTARY_MEMBER_PRICE_IDS.contains(currLine.OrderApi__Price_Rule__c)) {
                
//                if (currLine.OrderApi__Sales_Order__r.OrderApi__Total__c == 1) {
                    salesOrderLineIdNeedUpdateTotal.add(currLine.Id);
//                    salesOrderUpdateTotal.add(currLine.OrderApi__Sales_Order__c);
//                }
            }
        }
    }

    private Map<Id, OrderApi__Sales_Order__c> convertSOListToSOMap(List<OrderApi__Sales_Order__c> salesOrders) {
        Map<Id, OrderApi__Sales_Order__c> relevantSalesOrdersMap = new Map<Id, OrderApi__Sales_Order__c>();
        for (OrderApi__Sales_Order__c currSOrder : salesOrders) {
            relevantSalesOrdersMap.put(currSOrder.Id, currSOrder);
        }
        return relevantSalesOrdersMap;
    }


    private void createGenContributionItemsForSalesOrderAndAddToList(List<OrderApi__Sales_Order_Line__c> membershipSalesOrderLines,
            Map<Id, Contact> firmBillingMap,
            List<OrderApi__Sales_Order_Line__c> salesOrderLinesToInsert) {
        Set<Id> salesOrderIds = new Set<Id>();
        Set<Id> salesOrdersToSkipDonationItem = new Set<Id>();
        Set<Id> firmBillingSalesOrders = new Set<Id>();

        for (OrderApi__Sales_Order_Line__c currSOL : membershipSalesOrderLines) {
            if (firmBillingMap.containsKey(currSOL.OrderApi__Contact__c)) {
                firmBillingSalesOrders.add(currSOL.OrderApi__Sales_Order__c);
            }

            // Student memberships don't need General contribution item
            if (LAW_STUDENT_IDS.contains(currSOL.OrderApi__Item__c) || (currSOL.OrderApi__Subscription_Plan__r.FS_Do_Not_Add_Donation_Item__c &&
                    currSOL.OrderApi__Is_Renewal__c) || currSOL.OrderApi__Sales_Order__r.OrderApi__Total__c == 0) {
                salesOrdersToSkipDonationItem.add(currSOL.OrderApi__Sales_Order__c);
            }
            salesOrderIds.add(currSOL.OrderApi__Sales_Order__c);
        }

        for (OrderApi__Sales_Order__c currSalesOrder : [
                SELECT Id, OrderApi__Contact__c
                FROM OrderApi__Sales_Order__c
                WHERE Id IN :salesOrderIds
        ]) {
            // Student memberships don't need General contribution item
            if (firmBillingSalesOrders.contains(currSalesOrder.Id) || !salesOrdersToSkipDonationItem.contains(currSalesOrder.Id)) {
                OrderApi__Sales_Order_Line__c toAdd = new OrderApi__Sales_Order_Line__c(
                        OrderApi__Sales_Order__c = currSalesOrder.Id,
                        OrderApi__Contact__c = currSalesOrder.OrderApi__Contact__c,
                        OrderApi__Entity__c = 'Contact',
                        OrderApi__Item__c = GENERAL_CONTRIBUTION_ID,
                        OrderApi__Price_Override__c = true,
                        OrderApi__Sale_Price__c = INDIVIDUAL_CONTRIBUTION_AMOUNT
                );

                if (firmBillingSalesOrders.contains(currSalesOrder.Id)) {
                    toAdd.OrderApi__Sale_Price__c = FIRM_BILL_CONTRIBUTION_AMOUNT;
                }
                salesOrderLinesToInsert.add(toAdd);
            }
        }
    }

    private List<OrderApi__Sales_Order__c> rebuildRelevantSalesOrders(Map<Id, OrderApi__Sales_Order__c> salesOrderIdToSalesOrder,
            List<OrderApi__Sales_Order__c> salesOrdersToAdd,
            List<OrderApi__Sales_Order__c> salesOrdersToDelete) {

        for (OrderApi__Sales_Order__c currSalesOrder : salesOrdersToAdd) {
            salesOrderIdToSalesOrder.put(currSalesOrder.Id, currSalesOrder);
        }

        for (OrderApi__Sales_Order__c currSalesOrder : salesOrdersToDelete) {
            salesOrderIdToSalesOrder.remove(currSalesOrder.Id);
        }

        return salesOrderIdToSalesOrder.values();

    }

    /**
     * Creates a set of free CGM for each of the contacts in the passed in set
     *
     * @param contactIds Ids of the contacts that we need to check for free CGMs
     */
    private void populateFreeCGMs(Set<Id> contactIds) {
        /*
         * Get all the active CGMT records and check the sales order associated with it, if it is a student membership
         * and the price of the item is 0, then it was free
        */
        List<FS_Community_Group_Member_Term__c> relevantTerms
                = [
                SELECT Id, FS_Sales_Order_Line__r.OrderApi__Sales_Order__c,
                        FS_Sales_Order_Line__r.OrderApi__Item__c,
                        FS_Community_Group_Member__r.PagesApi__Community_Group__c,
                        FS_Term__r.OrderApi__Sales_Order__c, FS_Community_Group_Member__r.PagesApi__Contact__c,
                        FS_Sales_Order_Line__r.OrderApi__Sale_Price__c,
                        FS_Sales_Order_Line__r.OrderApi__Price_Override__c,
                        FS_Term__r.OrderApi__Item__c
                FROM FS_Community_Group_Member_Term__c
                WHERE FS_Community_Group_Member__r.PagesApi__Status__c = 'Active'
                AND FS_Community_Group_Member__r.PagesApi__Contact__c IN :contactIds
                AND FS_Is_Active__c = TRUE
        ];

        Set<Id> cgIds = new Set<Id>();
        for (FS_Community_Group_Member_Term__c currTerm : relevantTerms) {
            cgIds.add(currTerm.FS_Community_Group_Member__r.PagesApi__Community_Group__c);
        }

        Map<Id, Set<Id>> currCGToItems = retrieveCGToItemIds(cgIds);

        for (FS_Community_Group_Member_Term__c currTerm : relevantTerms) {

            //if the below conditions are met, the item was free
            if (currTerm.FS_Sales_Order_Line__r.OrderApi__Price_Override__c
                    && currTerm.FS_Sales_Order_Line__r.OrderApi__Sale_Price__c == 0
                    && currTerm.FS_Sales_Order_Line__r.OrderApi__Sales_Order__c == currTerm.FS_Term__r.OrderApi__Sales_Order__c
                    && LAW_STUDENT_IDS.contains(currTerm.FS_Term__r.OrderApi__Item__c)) {
                Id contactId = currTerm.FS_Community_Group_Member__r.PagesApi__Contact__c;
                Id communityGroupId = currTerm.FS_Community_Group_Member__r.PagesApi__Community_Group__c;
                Set<Id> itemIds = currCGToItems.get(communityGroupId);
                if (itemIds == null || itemIds.size() == 0) {
                    System.debug(LoggingLevel.WARN, 'Missing items for Community Group: ' + communityGroupId + ' will skip this record.');
                } else {
                    Set<Id> freeItemIdsOnContact = contactIdToFreeCGMItemIds.get(contactId);
                    if (freeItemIdsOnContact == null) {
                        freeItemIdsOnContact = new Set<Id>();
                        contactIdToFreeCGMItemIds.put(contactId, freeItemIdsOnContact);
                    }

                    freeItemIdsOnContact.addAll(itemIds);
                }
            }
        }
    }

    private Map<Id, Set<Id>> retrieveCGToItemIds(Set<Id> cgIds) {
        Map<Id, Set<Id>> currCGToItems = new Map<Id, Set<Id>>();
        for (PagesApi__Community_Group__c currCG : [
                SELECT Id, (SELECT Id FROM Items__r)
                FROM
                        PagesApi__Community_Group__c
                WHERE Id IN :cgIds
        ]) {
            Set<Id> toAdd = new Set<Id>();
            for (OrderApi__Item__c currItem : currCG.Items__r) {
                toAdd.add(currItem.Id);
            }
            currCGToItems.put(currCG.Id, toAdd);
        }
        return currCGToItems;
    }

    private List<OrderApi__Sales_Order__c> reassignFirmBillingSalesOrderLines(List<OrderApi__Sales_Order_Line__c> membershipSalesOrderLines,
            Map<Id, Contact> firmBillingContacts, List<OrderApi__Sales_Order__c> relevantSalesOrders) {

        Map<Id, OrderApi__Sales_Order__c> salesOrderIdToSalesOrder = convertSOListToSOMap(relevantSalesOrders);
        Map<Id, List<OrderApi__Sales_Order_Line__c>> contactIdToSalesOrderLinesThatNeedSO
                = new Map<Id, List<OrderApi__Sales_Order_Line__c>>();
        List<OrderApi__Sales_Order_Line__c> salesOrderLinesToUpdate = new List<OrderApi__Sales_Order_Line__c>();
        Set<Id> salesOrdersIdToDelete = new Set<Id>();

        for (OrderApi__Sales_Order_Line__c currSalesOrderLine : membershipSalesOrderLines) {
            if (firmBillingContacts.containsKey(currSalesOrderLine.OrderApi__Contact__c)) {
                Id primaryContactId = currSalesOrderLine.OrderApi__Contact__r.FS_Primary_Affiliation__r.OrderApi__Primary_Contact__c;
                if (primaryContactId != null) {
                    Id parentSalesOrderId = contactIdToSalesOrderIdMap.get(primaryContactId);
                    if (parentSalesOrderId == null) {
                        // we need to create these sales order lines
                        System.debug(LoggingLevel.INFO, 'Creating sales order for primary contact');
                        List<OrderApi__Sales_Order_Line__c> salesOrderLinesToReAssign
                                = contactIdToSalesOrderLinesThatNeedSO.get(primaryContactId);
                        if (salesOrderLinesToReAssign == null) {
                            salesOrderLinesToReAssign = new List<OrderApi__Sales_Order_Line__c>();
                            contactIdToSalesOrderLinesThatNeedSO.put(primaryContactId, salesOrderLinesToReAssign);
                        }
                        salesOrderLinesToReAssign.add(currSalesOrderLine);
                    } else {
                        if (currSalesOrderLine.OrderApi__Sales_Order__c != parentSalesOrderId) {
                            salesOrdersIdToDelete.add(currSalesOrderLine.OrderApi__Sales_Order__c);
                            currSalesOrderLine.OrderApi__Sales_Order__c = parentSalesOrderId;
                            salesOrderLinesToUpdate.add(currSalesOrderLine);
                            contactIdToSalesOrderIdMap.put(currSalesOrderLine.OrderApi__Contact__c, parentSalesOrderId);
                        }
                    }
                } else {
                    // treat this contact as an individual membership since there is no affiliation or primary contact on their record.
                    firmBillingContacts.remove(currSalesOrderLine.OrderApi__Contact__c);
                }
            }
        }

        // create sales orders for the primary contacts missing records
        List<OrderApi__Sales_Order__c> newSalesOrders = new List<OrderApi__Sales_Order__c>();

        for (Id contactId : new List<Id>(contactIdToSalesOrderLinesThatNeedSO.keySet())) {
            newSalesOrders.add(new OrderApi__Sales_Order__c(OrderApi__Entity__c = 'Contact',
                    OrderApi__Posting_Entity__c = 'Receipt', OrderApi__Contact__c = contactId,
                    OrderApi__Status__c = 'Open', FS_Proforma_Job_In_Progress__c = true));
        }

        insert newSalesOrders;

        for (OrderApi__Sales_Order__c currSalesOrder : newSalesOrders) {
            List<OrderApi__Sales_Order_Line__c> relevantSOLs
                    = contactIdToSalesOrderLinesThatNeedSO.get(currSalesOrder.OrderApi__Contact__c);
            if (relevantSOLs == null) {
                System.debug(LoggingLevel.ERROR, 'Expected Sales Order Lines for Contact: '
                        + currSalesOrder.OrderApi__Contact__c);
            } else {
                for (OrderApi__Sales_Order_Line__c currSOL : relevantSOLs) {
                    salesOrdersIdToDelete.add(currSOL.OrderApi__Sales_Order__c);
                    currSOL.OrderApi__Sales_Order__c = currSalesOrder.Id;
                    salesOrderLinesToUpdate.add(currSOL);
                    contactIdToSalesOrderIdMap.put(currSOL.OrderApi__Contact__c, currSalesOrder.Id);
                }
            }
        }

        // TODO we can get rid of this DML call if are hitting limits by putting it with the other SOLs to be updated
        update salesOrderLinesToUpdate;

        // delete the unnecessary sales orders since they should have no sales order lines after this
        List<OrderApi__Sales_Order__c> soListToDelete = new List<OrderApi__Sales_Order__c>();
        for (Id currSOId : new List<Id>(salesOrdersIdToDelete)) {
            soListToDelete.add(new OrderApi__Sales_Order__c(Id = currSOId));
        }

        delete soListToDelete;
        return rebuildRelevantSalesOrders(salesOrderIdToSalesOrder, newSalesOrders, soListToDelete);
    }

    private List<OrderApi__Sales_Order_Line__c> requerySalesOrderLinesWithFirmBillingContacts(Set<Id> contactIds) {
        String query = SALES_ORDER_LINE_QUERY + ' AND OrderApi__Contact__c IN :contactIds';
        return Database.query(query);
    }

    private List<OrderApi__Sales_Order_Line__c> removePrimaryContactsWhoOptedOutOfFirmBilling(
            List<OrderApi__Sales_Order_Line__c> membershipSalesOrderLines, Map<Id, Contact> firmBillingContacts) {
        Set<Id> primaryContactIdsToRemove = new Set<Id>();

        for (OrderApi__Sales_Order_Line__c currSalesOrderLine : membershipSalesOrderLines) {
            if (firmBillingContacts.containsKey(currSalesOrderLine.OrderApi__Contact__c)) {
                Id primaryContactId = currSalesOrderLine.OrderApi__Contact__r.FS_Primary_Affiliation__r.OrderApi__Primary_Contact__c;
                Id parentSalesOrderId = contactIdToSalesOrderIdMap.get(primaryContactId);
                // primary contact's sales order needs to be separately handled since it is not part of firm bill
                // remove it from this batch job and have it be rerun in a separate batch job
                if (parentSalesOrderId != null && !firmBillingContacts.containsKey(primaryContactId)) {
                    contactIdToSalesOrderIdMap.remove(primaryContactId);
                    primaryContactIdsToRemove.add(primaryContactId);
                    primaryContactId = null;
                }
            }
        }

        List<OrderApi__Sales_Order_Line__c> resultantList = new List<OrderApi__Sales_Order_Line__c>();
        for (OrderApi__Sales_Order_Line__c currSalesOrderLine : membershipSalesOrderLines) {
            if (!primaryContactIdsToRemove.contains(currSalesOrderLine.OrderApi__Contact__c)) {
                resultantList.add(currSalesOrderLine);
            }
        }

        return resultantList;
    }

    /**
     * Return the contacts that have firm billing true for all accounts associated wth the Sales Orders
     * in this batch class
     *
     * @param allAccountIds
     *
     * @return A Map containing the contact Ids for firm billing for these accounts as the key and the relevant contact
     * record as the value
     */
    private Map<Id, Contact> getContactsWithPrimaryAffFirmBilling(Set<Id> allAccountIds) {
        List<FS_Affiliation__c> affiliationsWithFirmBilling = [
                SELECT Id,
                        FS_Child_Contact__r.FS_Primary_Affiliation__r.OrderApi__Primary_Contact__c
                FROM FS_Affiliation__c
                WHERE FS_Firm_Bill__c = TRUE AND FS_Primary_Affiliation__c = TRUE
                AND FS_Status__c = 'Active' AND
                FS_Parent_Account__c IN :allAccountIds
        ];

        Map<Id, Contact> firmBillingContacts = new Map<Id, Contact>();

        for (FS_Affiliation__c currAff : affiliationsWithFirmBilling) {
            firmBillingContacts.put(currAff.FS_Child_Contact__c, currAff.FS_Child_Contact__r);
        }

        return firmBillingContacts;
    }

    private Set<Id> getContactIdsFromSalesOrderLinesAndMapContactToSO(List<OrderApi__Sales_Order_Line__c> relevantSalesOrderLines) {
        Set<Id> relevantContacts = new Set<Id>();
        for (OrderApi__Sales_Order_Line__c currSalesOrderLine : relevantSalesOrderLines) {
            relevantContacts.add(currSalesOrderLine.OrderApi__Contact__c);
            contactIdToSalesOrderIdMap.put(currSalesOrderLine.OrderApi__Contact__c, currSalesOrderLine.OrderApi__Sales_Order__c);
        }
        return relevantContacts;
    }

    private Set<Id> getAccountIdsFromRelevantSalesOrdersLines(List<OrderApi__Sales_Order_Line__c> relevantSalesOrdersLines) {
        Set<Id> relevantAccountIds = new Set<Id>();
        for (OrderApi__Sales_Order_Line__c currSalesOrderLine : relevantSalesOrdersLines) {
            // proforma invoices generated by the system should only have 1 sales order line.
            relevantAccountIds.add(currSalesOrderLine.OrderApi__Contact__r.FS_Primary_Affiliation__c);
        }
        return relevantAccountIds;
    }


    private List<OrderApi__Sales_Order_Line__c> generateSaleOrderLinesForCGMs(Set<Id> contactIds) {
        Map<Id, FS_ProformaBatchJob.SectionsAndSubsectionsOnContact> contactCGMInformation
                = generateSectionsAndSubSectionsForContacts(contactIds);
        List<OrderApi__Sales_Order_Line__c> salesOrderLinesToReturn = new List<OrderApi__Sales_Order_Line__c>();

        for (FS_ProformaBatchJob.SectionsAndSubsectionsOnContact currContactSectionInfo : contactCGMInformation.values()) {
            Id salesOrderId = contactIdToSalesOrderIdMap.get(currContactSectionInfo.contactId);
            if (salesOrderId != null) {
                salesOrderLinesToReturn.addAll(currContactSectionInfo.generateSalesOrderLinesForCGM(salesOrderId));
            } else {
                System.debug(LoggingLevel.WARN, 'Missing Sales Order Id for contact: '
                        + currContactSectionInfo.contactId + '. This shouldnt happen');
            }
        }
        return salesOrderLinesToReturn;
    }

    private void retrieveAndStoreAllRelevantCGMRecords(Set<Id> allContactIds) {
        for (PagesApi__Community_Group_Member__c currCGM : [
                SELECT Id, PagesApi__Contact__c,
                        PagesApi__Community_Group__c,
                        PagesApi__Community_Group__r.FS_Parent_Section__c,
                        PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__c,
                        PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__c,
                        PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__c,
                        PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__c
                FROM PagesApi__Community_Group_Member__c
                WHERE PagesApi__Contact__c IN :allContactIds
                AND PagesApi__Status__c = 'Active'
                AND FS_Exempt_from_Pro_forma_Renewals__c = FALSE
                AND PagesApi__Community_Group__r.PagesApi__Is_Published__c = TRUE
                AND (PagesApi__Community_Group__r.PagesApi__Type__c = :SECTION_TYPE_STRING
                OR PagesApi__Community_Group__r.PagesApi__Type__c = :SECTION_COMMITTEE_STRING)
        ]) {
            cgmCache.put(currCGM.Id, currCGM);
        }
    }

    private List<PagesApi__Community_Group_Member__c> getRelevantCGMRecords(Set<Id> contactIds) {
        List<PagesApi__Community_Group_Member__c> cgmsToReturn = new List<PagesApi__Community_Group_Member__c>();
        for (PagesApi__Community_Group_Member__c currCGM : cgmCache.values()) {
            if (contactIds.contains(currCGM.PagesApi__Contact__c)) {
                cgmsToReturn.add(currCGM);
            }
        }
        return cgmsToReturn;
    }

    /**
     * Retrieves the parent section committee for the passed on Community Group Member Record.
     * Note: This method only supports nested Community Groups 5 levels or less.
     *
     * @param cgm - the community group member record passed in
     *
     * @return - the id of the parent committee
     */
    private static Id getTopLevelCG(PagesApi__Community_Group_Member__c cgm) {
        if (cgm.PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__c != null) {
            return cgm.PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__c;
        } else if (cgm.PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__c != null) {
            return cgm.PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__c;
        } else if (cgm.PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__c != null) {
            return cgm.PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__r.FS_Parent_Section__c;
        } else if (cgm.PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__c != null) {
            return cgm.PagesApi__Community_Group__r.FS_Parent_Section__r.FS_Parent_Section__c;
        } else if (cgm.PagesApi__Community_Group__r.FS_Parent_Section__c != null) {
            return cgm.PagesApi__Community_Group__r.FS_Parent_Section__c;
        }
        return null;
    }

    private Map<Id, SectionsAndSubsectionsOnContact> generateSectionsAndSubSectionsForContacts(Set<Id> contactIds) {
        List<PagesApi__Community_Group_Member__c> activeCGMs = getRelevantCGMRecords(contactIds);
        Map<Id, SectionsAndSubsectionsOnContact> contactIdToSectionIdToSectionsSubSection
                = new Map<Id, SectionsAndSubsectionsOnContact>();
        for (PagesApi__Community_Group_Member__c currCGM : activeCGMs) {
            SectionsAndSubsectionsOnContact contactSectionsAndSubs =
                    contactIdToSectionIdToSectionsSubSection.get(currCGM.PagesApi__Contact__c);
            if (contactSectionsAndSubs == null) {
                contactSectionsAndSubs = new SectionsAndSubsectionsOnContact(currCGM.PagesApi__Contact__c, this);
            }

            Id topLevelCG = getTopLevelCG(currCGM);
            if (topLevelCG != null) {
                Id sectionItemId = CG_TO_RENEWAL_ITEM.get(topLevelCG);
                if (sectionItemId != null) {
                    contactSectionsAndSubs.addSubSection(sectionItemId, currCGM.PagesApi__Community_Group__c);
                } else {
                    System.debug(LoggingLevel.WARN, 'Missing this section item from the Renewal list. ' +
                            'Most likely this group is missing a linked item record see: ' +
                            currCGM.PagesApi__Community_Group__r.FS_Parent_Section__c);
                }
            } else {
                Id sectionItemId = CG_TO_RENEWAL_ITEM.get(currCGM.PagesApi__Community_Group__c);
//                contactSectionsAndSubs.addSection(currCGM.get())
                if (sectionItemId != null) {
                    contactSectionsAndSubs.addSection(sectionItemId);
                } else {
                    System.debug(LoggingLevel.WARN, 'Missing this section item from the Renewal list. ' +
                            'Most likely this group is missing a linked item record see: ' +
                            currCGM.PagesApi__Community_Group__c);
                }
            }
            contactIdToSectionIdToSectionsSubSection.put(currCGM.PagesApi__Contact__c, contactSectionsAndSubs);
        }
        return contactIdToSectionIdToSectionsSubSection;
    }

    class SectionsAndSubsectionsOnContact {
        public Id contactId { get; set; }
        public Map<Id, FS_ProformaBatchJob.SectionsSubSectionsRecord> sectionsAndSubSectionsOnContact { get; set; }
        public FS_ProformaBatchJob outerClass;

        public SectionsAndSubsectionsOnContact(Id contactId, FS_ProformaBatchJob outerClass) {
            sectionsAndSubSectionsOnContact = new Map<Id, FS_ProformaBatchJob.SectionsSubSectionsRecord>();
            this.contactId = contactId;
            this.outerClass = outerClass;
        }

        public void addSubSection(Id sectionItemId, Id subsectionCGId) {
            FS_ProformaBatchJob.SectionsSubSectionsRecord subsections
                    = sectionsAndSubSectionsOnContact.get(sectionItemId);
            if (subsections == null) {
                subsections = new FS_ProformaBatchJob.SectionsSubSectionsRecord(sectionItemId, outerClass);
            }
            subsections.addInSubsectionCGId(subsectionCGId);
            sectionsAndSubSectionsOnContact.put(sectionItemId, subsections);
        }

        public void addSection(Id sectionItemId) {
            FS_ProformaBatchJob.SectionsSubSectionsRecord subsections
                    = sectionsAndSubSectionsOnContact.get(sectionItemId);
            if (subsections == null) {
                subsections = new FS_ProformaBatchJob.SectionsSubSectionsRecord(sectionItemId, outerClass);
                sectionsAndSubSectionsOnContact.put(sectionItemId, subsections);
            }
        }

        public List<OrderApi__Sales_Order_Line__c> generateSalesOrderLinesForCGM(Id salesOrderId) {
            List<OrderApi__Sales_Order_Line__c> salesOrderLines = new List<OrderApi__Sales_Order_Line__c>();
            for (FS_ProformaBatchJob.SectionsSubSectionsRecord currRecord : sectionsAndSubSectionsOnContact.values()) {
                salesOrderLines.add(currRecord.convertToSalesOrderLine(contactId, salesOrderId));
            }
            return salesOrderLines;
        }
    }

    class SectionsSubSectionsRecord {
        public Id sectionItemId { get; set; }
        public Set<Id> subsectionCGIds { get; set; }
        public FS_ProformaBatchJob outerClass { get; set; }

        public SectionsSubSectionsRecord(Id sectionItemId, FS_ProformaBatchJob outerClass) {
            subsectionCGIds = new Set<Id>();
            this.sectionItemId = sectionItemId;
            this.outerClass = outerClass;
        }

        public OrderApi__Sales_Order_Line__c convertToSalesOrderLine(Id contactId, Id salesOrderId) {
            OrderApi__Sales_Order_Line__c salesOrderLineToReturn = new OrderApi__Sales_Order_Line__c(
                    OrderApi__Sales_Order__c = salesOrderId,
                    OrderApi__Contact__c = contactId,
                    OrderApi__Item__c = sectionItemId,
                    FS_Additional_Data__c = generateAdditionalDataForSalesOrder(),
                    OrderApi__Entity__c = 'Contact'
            );

            Set<Id> freeItemIdsForContact = outerClass.contactIdToFreeCGMItemIds.get(contactId);

            // if this item was supposed to be a free section, set the price to 0
            if (freeItemIdsForContact != null && freeItemIdsForContact.contains(sectionItemId)) {
                salesOrderLineToReturn.OrderApi__Price_Override__c = true;
                salesOrderLineToReturn.OrderApi__Sale_Price__c = 0;
            }
            return salesOrderLineToReturn;
        }


        public String generateAdditionalDataForSalesOrder() {
            if (subsectionCGIds.size() > 0) {
                String additionalData = '{"sectionCommittees":[';
                for (Id currSubsectionGroupId : new List<Id>(subsectionCGIds)) {
                    additionalData += '"' + currSubsectionGroupId + '",';
                }
                additionalData = additionalData.removeEnd(',');
                additionalData += ']}';
                return additionalData;
            } else {
                return '{}';
            }
        }

        public void addInSubsectionCGId(Id subSectionCGId) {
            subsectionCGIds.add(subSectionCGId);
        }
    }
}